To create a PDF with content in the first half of the page and an image (from byte code) in the second half, we will use Apache PDFBox. The PDF will be formatted on an A4 page, where the top half contains text, and the bottom half contains the image.

Here's the detailed Java code:


---

Full Java Code

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class PdfWithContentAndImage {
    public static byte[] createPdf(byte[] imageBytes) throws IOException {
        // Create a new A4 PDF document
        PDDocument document = new PDDocument();
        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
        document.addPage(page);

        // Create content stream
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        // 1. Write content in the top half of the page
        contentStream.setFont(PDType1Font.HELVETICA, 12); // Set font and size
        contentStream.setLeading(14.5f);                  // Line spacing
        contentStream.beginText();
        contentStream.newLineAtOffset(50, 750);          // Start near top-left of the page

        // Add the text content
        contentStream.showText("UPS Electronic Return Label: View/Print Label");
        contentStream.newLine();
        contentStream.showText("1. Ensure that there are no other tracking labels attached to your shipment.");
        contentStream.newLine();
        contentStream.showText("2. Fold the printed label at the dotted line.");
        contentStream.newLine();
        contentStream.showText("3. Collection and Drop-off:");
        contentStream.newLine();
        contentStream.showText("Take this parcel to any location of The UPS Store or UPS Drop Box.");
        contentStream.endText();

        // 2. Draw image in the bottom half of the page
        PDImageXObject pdImage = PDImageXObject.createFromByteArray(document, imageBytes, "UPS Label");

        // Scale image to fit in the bottom half (A4 page size: 595 x 842 points)
        float imageWidth = pdImage.getWidth();
        float imageHeight = pdImage.getHeight();
        float maxImageWidth = 500; // Adjust as needed to fit
        float maxImageHeight = 300; // Adjust as needed to fit

        // Calculate scaling factors
        float scale = Math.min(maxImageWidth / imageWidth, maxImageHeight / imageHeight);

        // Adjusted width and height
        imageWidth *= scale;
        imageHeight *= scale;

        // Place the image in the bottom half of the page (adjust Y coordinate)
        float imageX = 50; // X-coordinate
        float imageY = 250; // Y-coordinate (bottom half starts roughly here)
        contentStream.drawImage(pdImage, imageX, imageY, imageWidth, imageHeight);

        // Close the content stream
        contentStream.close();

        // Write PDF to a ByteArrayOutputStream
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        document.save(byteArrayOutputStream);
        document.close();

        // Return PDF as a byte array
        return byteArrayOutputStream.toByteArray();
    }

    public static void main(String[] args) {
        try {
            // Example: Byte array from external system
            byte[] imageBytes = java.nio.file.Files.readAllBytes(java.nio.file.Path.of("path/to/your/image.png"));

            // Create PDF
            byte[] pdfBytes = createPdf(imageBytes);

            // Save PDF to file (optional for testing)
            java.nio.file.Files.write(java.nio.file.Path.of("output.pdf"), pdfBytes);

            System.out.println("PDF generated successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


---

Explanation of Key Parts:

1. Page Layout (A4)

The A4 page size in PDFBox is (595 x 842) points.

Text is written in the top half of the page starting at (50, 750) points.

The image is placed in the bottom half, starting at (50, 250) points.



2. Adding Text (First Half)

A PDPageContentStream is used to write text to the page.

The newLineAtOffset(50, 750) sets the starting position of the text block.

The setLeading(14.5f) determines the vertical line spacing.

showText() writes each line of text.



3. Adding Image (Second Half)

The PDImageXObject.createFromByteArray() is used to embed the image from the byte[].

The image is scaled to fit within a 500 x 300 bounding box (adjust as necessary).



4. Scaling the Image

The scaling factor ensures the image fits proportionally within the bottom half of the page.

The drawImage() method positions the image using the calculated dimensions.



5. Returning the PDF as Byte Array

The PDF is saved into a ByteArrayOutputStream, and the byte array is returned. This can be sent in an HTTP response or saved to a file.





---

Adjustments:

Text Layout: Change the Y-coordinate in newLineAtOffset to position the text higher or lower on the page.

Image Size: Adjust maxImageWidth and maxImageHeight to fit different image dimensions.

Page Size: If you need a custom page size, you can use PDRectangle to define one.



---

Output:

Top Half: Contains the provided text content.

Bottom Half: Displays the image from the byte[].


This code provides the exact layout you need and integrates the byte array for the image seamlessly. Let me know if you need further refinements!
